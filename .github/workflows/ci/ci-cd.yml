name: CI/CD 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: docker login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}   
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - name: docker build accuracy
      run: |
        docker build ./accuracy -t sketchmapia-2.0/accuracy:1.0.0
    - name: docker build completeness
      run: |
        docker build ./completeness -t sketchmapia-2.0/completeness:1.0.0
    - name: docker build generalizations
      run: |
        docker build ./generalizations -t sketchmapia-2.0/generalizations:1.0.0
    - name: docker build sketchmap_analyser
      run: |
        docker build ./sketchmap_analyser -t sketchmapia-2.0//sketchmap_analyser:1.0.0
    - name: docker push
      run: |
        docker push sketchmapia-2.0/accuracy:1.0.0
        docker push sketchmapia-2.0/completeness:1.0.0
        docker push sketchmapia-2.0/generalizations:1.0.0
        docker push sketchmapia-2.0//sketchmap_analyser:1.0.0

    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v3

    #   # Install the cosign tool except on PR
    #   # https://github.com/sigstore/cosign-installer
    #   - name: Install cosign
    #     if: github.event_name != 'pull_request'
    #     uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
    #     with:
    #       cosign-release: 'v2.1.1'

    #   # Set up BuildKit Docker container builder to be able to build
    #   # multi-platform images and export cache
    #   # https://github.com/docker/setup-buildx-action
    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

    #   # Login against a Docker registry except on PR
    #   # https://github.com/docker/login-action
    #   - name: Log into registry ${{ env.REGISTRY }}
    #     if: github.event_name != 'pull_request'
    #     uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
    #     with:
    #       registry: ${{ env.REGISTRY }}
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}

    #   # Extract metadata (tags, labels) for Docker
    #   # https://github.com/docker/metadata-action
    #   - name: Extract Docker metadata
    #     id: meta
    #     uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
    #     with:
    #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    #   # Build and push Docker image with Buildx (don't push on PR)
    #   # https://github.com/docker/build-push-action
    #   - name: Build and push Docker image
    #     id: build-and-push
    #     uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
    #     with:
    #       context: .
    #       push: ${{ github.event_name != 'pull_request' }}
    #       tags: ${{ steps.meta.outputs.tags }}
    #       labels: ${{ steps.meta.outputs.labels }}
    #       cache-from: type=gha
    #       cache-to: type=gha,mode=max

    #   # Sign the resulting Docker image digest except on PRs.
    #   # This will only write to the public Rekor transparency log when the Docker
    #   # repository is public to avoid leaking data.  If you would like to publish
    #   # transparency data even for private images, pass --force to cosign below.
    #   # https://github.com/sigstore/cosign
    #   - name: Sign the published Docker image
    #     if: ${{ github.event_name != 'pull_request' }}
    #     env:
    #       # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
    #       TAGS: ${{ steps.meta.outputs.tags }}
    #       DIGEST: ${{ steps.build-and-push.outputs.digest }}
    #     # This step uses the identity token to provision an ephemeral certificate
    #     # against the sigstore community Fulcio instance.
    #     run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
